Crear usuarios con Tinker
->php artisan tinker
// Creación de Usuarios en laragon
$u = new App\User;\
$u->name = "Administrador";\
$u->email = "admin@email.com";\
$u->password = bcrypt('123456');\
$u->save();

$u = new App\User;\
$u->name = "Estudiante";\
$u->email = "estudiante@email.com";\
$u->password = bcrypt("123456");\
$u->save();

$u = new App\User;\
$u->name = "Moderador";\
$u->email = "moderador@email.com";\
$u->password = bcrypt("123456");\
$u->save();

$r = new App\Role;\
$r->name = "admin";\
$r->display_name = "Administrador del sitio";\
$r->descripcion = "Este role tiene los permisos para administrar el sitio entero";\
$r->save();


$r = new App\Role;\
$r->name = "mod";\
$r->display_name = "Moderador de Comentarios en el sistema";\
$r->descripcion ="Se encarga de revisar los comentarios del sistema";\
$r->save();

$r = new App\Role;\
 $r->name ="estudiante";\
 $r->display_name = "Estudiante del sitio";\
 $r->descripcion = "Este role tiene los permisos de estudiante";\
 $r->save();


//Para las relaciones polimorficas
$message = App\Message::first();
$message->note()->create(['body' => 'Nota del Mensaje 1']);

$message = App\Message::find(2);
$message->note()->create(['body' => 'Nota del Mensaje 2']);

$u = App\User::find(1);
$u->note()->create(['body' => 'Nota del Usuario 1']);

$u = App\User::find(2);
$u->note()->create(['body' => 'Nota del Usuario 2']);

$u = App\User::find(3);
$u->note()->create(['body' => 'Nota del Usuario 3']);

//Para relaciones polimorficas de muchos a muchos
$message = App\Message::first();
$message->tags()->create(['name' => 'Importante']);

$tag = App\Tag::create(['name' => 'No importante']);
$message->tags()->save($tag);

$u = App\User::find(1);
$tag = App\Tag::find(1);
$u->tags()->save($tag);

*para quitar la relacion
$u->tags()->detach(1);
$u->fresh()->tags;

// Creación de Usuarios en homestead
$u = new App\User;\
$u->name = "Administrador";\
$u->email = "admin@email.com";\
$u->password = '123456';\
$u->save();

//Manejo de Cache
**Esto es para meter datos
Cache::put('key','valor',1000);
**Esto es para consultar el datos
Cache::get('key');
**Metodo has para preguntar si existe una llave en el Cache
Cache::has('key');
**Quitar manualmente un valor del Cache
Cache::forget('key');
**Eliminar todos las keys de Cache
Cache::flush();
